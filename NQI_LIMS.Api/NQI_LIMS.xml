<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NQI_LIMS.Api</name>
    </assembly>
    <members>
        <member name="T:NQI_LIMS.Controllers.BlogController">
            <summary>
            博客管理
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.BlogController.#ctor(NQI_LIMS.IServices.IBlogArticleServices,Microsoft.Extensions.Logging.ILogger{NQI_LIMS.Controllers.BlogController})">
            <summary>
            构造函数
            </summary>
            <param name="blogArticleServices"></param>
            <param name="logger"></param>
        </member>
        <member name="M:NQI_LIMS.Controllers.BlogController.Get(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            获取博客列表【无权限】
            </summary>
            <param name="id"></param>
            <param name="page"></param>
            <param name="bcategory"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.BlogController.Get(System.Int32)">
            <summary>
            获取博客详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.BlogController.DetailNuxtNoPer(System.Int32)">
            <summary>
            获取详情【无权限】
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.BlogController.V2_Blogtest">
            <summary>
            获取博客测试信息 v2版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.BlogController.Post(NQI_LIMS.Model.BlogArticle)">
            <summary>
            添加博客【无权限】
            </summary>
            <param name="blogArticle"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.BlogController.AddForMVP(NQI_LIMS.Model.BlogArticle)">
            <summary>
            
            </summary>
            <param name="blogArticle"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.BlogController.Put(NQI_LIMS.Model.BlogArticle)">
            <summary>
            更新博客信息
            </summary>
            <param name="BlogArticle"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.BlogController.Delete(System.Int32)">
            <summary>
            删除博客
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.BlogController.ApacheTestUpdate">
            <summary>
            apache jemeter 压力测试
            更新接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.DbFirstController.#ctor(SqlSugar.ISqlSugarClient,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.DbFirstController.GetFrameFiles">
            <summary>
            获取 整体框架 文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.DbFirstController.GetFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            根据数据库表名 生成整体框架
            仅针对通过CodeFirst生成表的情况
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.MigrateController.GetRMPMaps">
            <summary>
            获取权限部分Map数据
            生成到tsb文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.MigrateController.SaveDataToDb">
            <summary>
            保存数据到数据库
            </summary>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.HealthCheckController">
            <summary>
            健康检查
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.HealthCheckController.Get">
            <summary>
            健康检查接口
            </summary>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.ImgController">
            <summary>
            图片管理
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.ImgController.DownImg(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            下载图片（支持中文字符）
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ImgController.InsertPicture(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            上传图片,多文件，可以使用 postman 测试，
            如果是单文件，可以 参数写 IFormFile file1
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.LoginController">
            <summary>
            登录管理【无权限】
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.LoginController.#ctor(NQI_LIMS.IServices.ISysUserInfoServices,NQI_LIMS.IServices.IUserRoleServices,NQI_LIMS.IServices.IRoleServices,NQI_LIMS.AuthHelper.PermissionRequirement,NQI_LIMS.IServices.IRoleModulePermissionServices)">
            <summary>
            构造函数注入
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="requirement"></param>
            <param name="roleModulePermissionServices"></param>
        </member>
        <member name="M:NQI_LIMS.Controllers.LoginController.GetJwtStr(System.String,System.String)">
            <summary>
            获取JWT的方法1
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.LoginController.GetJwtStrForNuxt(System.String,System.String)">
            <summary>
            获取JWT的方法2：给Nuxt提供
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.LoginController.GetJwtToken3(System.String,System.String)">
            <summary>
            获取JWT的方法3：整个系统主要方法
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.LoginController.RefreshToken(System.String)">
            <summary>
            请求刷新Token（以旧换新）
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.LoginController.Getjsonp(System.String,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            获取JWT的方法4：给 JSONP 测试
            </summary>
            <param name="callBack"></param>
            <param name="id"></param>
            <param name="sub"></param>
            <param name="expiresSliding"></param>
            <param name="expiresAbsoulute"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.LoginController.Md5Password(System.String)">
            <summary>
            测试 MD5 加密字符串
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.ModuleController">
            <summary>
            接口管理
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.ModuleController.Get(System.Int32,System.String)">
            <summary>
            获取全部接口api
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ModuleController.Post(NQI_LIMS.Model.Models.Modules)">
            <summary>
            添加一条接口信息
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ModuleController.Put(NQI_LIMS.Model.Models.Modules)">
            <summary>
            更新接口信息
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ModuleController.Delete(System.Int32)">
            <summary>
            删除一条接口
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.MonitorController.Server">
            <summary>
            服务器配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.MonitorController.Get">
            <summary>
            SignalR send data
            </summary>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.PermissionController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.PermissionController.#ctor(NQI_LIMS.IServices.IPermissionServices,NQI_LIMS.IServices.IModuleServices,NQI_LIMS.IServices.IRoleModulePermissionServices,NQI_LIMS.IServices.IUserRoleServices,Microsoft.AspNetCore.Http.IHttpContextAccessor,NQI_LIMS.Common.HttpContextUser.IUser,NQI_LIMS.AuthHelper.PermissionRequirement)">
            <summary>
            构造函数
            </summary>
            <param name="permissionServices"></param>
            <param name="moduleServices"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="userRoleServices"></param>
            <param name="httpContext"></param>
            <param name="user"></param>
            <param name="requirement"></param>
        </member>
        <member name="M:NQI_LIMS.Controllers.PermissionController.Get(System.Int32,System.String)">
            <summary>
            获取菜单
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.PermissionController.GetTreeTable(System.Int32,System.String)">
            <summary>
            查询树形 Table
            </summary>
            <param name="f">父节点</param>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.PermissionController.Post(NQI_LIMS.Model.Models.Permission)">
            <summary>
            添加一个菜单
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.PermissionController.Assign(NQI_LIMS.Controllers.AssignView)">
            <summary>
            保存菜单权限分配
            </summary>
            <param name="assignView"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.PermissionController.GetPermissionTree(System.Int32,System.Boolean)">
            <summary>
            获取菜单树
            </summary>
            <param name="pid"></param>
            <param name="needbtn"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.PermissionController.GetNavigationBar(System.Int32)">
            <summary>
            获取路由树
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.PermissionController.GetPermissionIdByRoleId(System.Int32)">
            <summary>
            通过角色获取菜单【无权限】
            </summary>
            <param name="rid"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.PermissionController.Put(NQI_LIMS.Model.Models.Permission)">
            <summary>
            更新菜单
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.PermissionController.Delete(System.Int32)">
            <summary>
            删除菜单
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.RoleController">
            <summary>
            角色管理
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.RoleController.Get(System.Int32,System.String)">
            <summary>
            获取全部角色
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.RoleController.Post(NQI_LIMS.Model.Models.Role)">
            <summary>
            添加角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.RoleController.Put(NQI_LIMS.Model.Models.Role)">
            <summary>
            更新角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.RoleController.Delete(System.Int32)">
            <summary>
            删除角色
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.TasksQzController.Get(System.Int32,System.String)">
            <summary>
            分页获取
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.TasksQzController.Post(NQI_LIMS.Model.Models.TasksQz)">
            <summary>
            添加计划任务
            </summary>
            <param name="tasksQz"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.TasksQzController.Put(NQI_LIMS.Model.Models.TasksQz)">
            <summary>
            修改计划任务
            </summary>
            <param name="tasksQz"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.TasksQzController.StartJob(System.Int32)">
            <summary>
            启动计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.TasksQzController.StopJob(System.Int32)">
            <summary>
            停止一个计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>        
        </member>
        <member name="M:NQI_LIMS.Controllers.TasksQzController.ReCovery(System.Int32)">
            <summary>
            重启一个计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.TopicController">
            <summary>
            类别管理【无权限】
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.TopicController.#ctor(NQI_LIMS.IServices.ITopicServices)">
            <summary>
            构造函数
            </summary>
            <param name="topicServices"></param>
        </member>
        <member name="M:NQI_LIMS.Controllers.TopicController.Get">
            <summary>
            获取Tibug所有分类
            </summary>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.TopicDetailController">
            <summary>
            Tibug 管理
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.TopicDetailController.#ctor(NQI_LIMS.IServices.ITopicServices,NQI_LIMS.IServices.ITopicDetailServices)">
            <summary>
            构造函数
            </summary>
            <param name="topicServices"></param>
            <param name="topicDetailServices"></param>
        </member>
        <member name="M:NQI_LIMS.Controllers.TopicDetailController.Get(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            获取Bug数据列表（带分页）
            【无权限】
            </summary>
            <param name="page">页数</param>
            <param name="tname">专题类型</param>
            <param name="key">关键字</param>
            <param name="intPageSize"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.TopicDetailController.Get(System.Int32)">
            <summary>
            获取详情【无权限】
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.TopicDetailController.Post(NQI_LIMS.Model.Models.TopicDetail)">
            <summary>
            添加一个 BUG 【无权限】
            </summary>
            <param name="topicDetail"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.TopicDetailController.Update(NQI_LIMS.Model.Models.TopicDetail)">
            <summary>
            更新 bug
            </summary>
            <param name="topicDetail"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.TopicDetailController.Delete(System.Int32)">
            <summary>
            删除 bug
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.UserController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.UserController.#ctor(NQI_LIMS.IRepository.UnitOfWork.IUnitOfWork,NQI_LIMS.IServices.ISysUserInfoServices,NQI_LIMS.IServices.IUserRoleServices,NQI_LIMS.IServices.IRoleServices,NQI_LIMS.Common.HttpContextUser.IUser,Microsoft.Extensions.Logging.ILogger{NQI_LIMS.Controllers.UserController})">
            <summary>
            构造函数
            </summary>
            <param name="unitOfWork"></param>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="user"></param>
            <param name="logger"></param>
        </member>
        <member name="M:NQI_LIMS.Controllers.UserController.Get(System.Int32,System.String)">
            <summary>
            获取全部用户
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.UserController.GetInfoByToken(System.String)">
            <summary>
            获取用户详情根据token
            【无权限】
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.UserController.Post(NQI_LIMS.Model.Models.sysUserInfo)">
            <summary>
            添加一个用户
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.UserController.Put(NQI_LIMS.Model.Models.sysUserInfo)">
            <summary>
            更新用户与角色
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.UserController.Delete(System.Int32)">
            <summary>
            删除用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.UserRoleController">
            <summary>
            用户角色关系
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.UserRoleController.#ctor(NQI_LIMS.IServices.ISysUserInfoServices,NQI_LIMS.IServices.IUserRoleServices,NQI_LIMS.IServices.IRoleServices)">
            <summary>
            构造函数
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
        </member>
        <member name="M:NQI_LIMS.Controllers.UserRoleController.AddUser(System.String,System.String)">
            <summary>
            新建用户
            </summary>
            <param name="loginName"></param>
            <param name="loginPwd"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.UserRoleController.AddRole(System.String)">
            <summary>
            新建Role
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.UserRoleController.AddUserRole(System.Int32,System.Int32)">
            <summary>
            新建用户角色关系
            </summary>
            <param name="uid"></param>
            <param name="rid"></param>
            <returns></returns>
        </member>
        <member name="T:NQI_LIMS.Controllers.ValuesController">
            <summary>
            Values控制器
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.#ctor(NQI_LIMS.IServices.IBlogArticleServices,AutoMapper.IMapper,NQI_LIMS.IServices.IAdvertisementServices,NQI_LIMS.Model.Love,NQI_LIMS.IServices.IRoleModulePermissionServices,NQI_LIMS.Common.HttpContextUser.IUser,NQI_LIMS.IServices.IPasswordLibServices,NQI_LIMS.Common.WebApiClients.HttpApis.IBlogApi,NQI_LIMS.Common.WebApiClients.HttpApis.IDoubanApi)">
            <summary>
            ValuesController
            </summary>
            <param name="blogArticleServices"></param>
            <param name="mapper"></param>
            <param name="advertisementServices"></param>
            <param name="love"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="user"></param>
            <param name="passwordLibServices"></param>
            <param name="blogApi"></param>
            <param name="doubanApi"></param>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.Get">
            <summary>
            Get方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.Get(System.Int32)">
            <summary>
            Get(int id)方法
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.RequiredP(System.String)">
            <summary>
            测试参数是必填项
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.GetUserInfo(System.String)">
            <summary>
            通过 HttpContext 获取用户信息
            </summary>
            <param name="ClaimType">声明类型，默认 jti </param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.Source">
            <summary>
            to redirect by route template name.
            </summary>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.Destination">
            <summary>
            route with template name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.Post(NQI_LIMS.Model.BlogArticle,System.Int32)">
            <summary>
            测试 post 一个对象 + 独立参数
            </summary>
            <param name="blogArticle">model实体类参数</param>
            <param name="id">独立参数</param>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.TestPostPara(System.String)">
            <summary>
            测试 post 参数
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.RestsharpGet">
            <summary>
            测试http请求 RestSharp Get
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.RestsharpPost">
            <summary>
            测试http请求 RestSharp Post
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.TestMutiDBAPI">
            <summary>
            测试多库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.WebApiClientGetAsync">
            <summary>
            测试http请求 WebApiClient Get
            </summary>
            <returns></returns>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.Put(System.Int32,System.String)">
            <summary>
            Put方法
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:NQI_LIMS.Controllers.ValuesController.Delete(System.Int32)">
            <summary>
            Delete方法
            </summary>
            <param name="id"></param>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.PM_CARYController._PM_CARYServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.PM_EC_PLATFORMController._PM_EC_PLATFORMServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.PM_EXEC_UINTController._PM_EXEC_UINTServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.PM_OTHERController._PM_OTHERServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.PM_PLANController._PM_PLANServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.PM_PLAN_SUBController._PM_PLAN_SUBServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.PM_PRODUCE_UNITController._PM_PRODUCE_UNITServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.ADD_SUPERVISEPLANController._ADD_SUPERVISEPLANServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.DEPARTMENTSController._DEPARTMENTSServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.DIVISIONSController._DIVISIONSServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.FOLDERSController._FOLDERSServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.ORDERSController._ORDERSServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.ORDTASKController._ORDTASKServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.PREORDERREMARKController._PREORDERREMARKServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.PREORDERSController._PREORDERSServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.PREORDTASKController._PREORDTASKServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.RASCLIENTSController._RASCLIENTSServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="F:NQI_LIMS.Api.Controllers.RESULTSController._RESULTSServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="T:NQI_LIMS.SwaggerHelper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:NQI_LIMS.SwaggerHelper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:NQI_LIMS.SwaggerHelper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:NQI_LIMS.SwaggerHelper.CustomRouteAttribute.#ctor(NQI_LIMS.Extensions.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
        <member name="T:NQI_LIMS.Filter.GlobalRouteAuthorizeConvention">
            <summary>
            Summary:全局路由权限公约
            Remarks:目的是针对不同的路由，采用不同的授权过滤器
            如果 controller 上不加 [Authorize] 特性，默认都是 Permission 策略
            否则，如果想特例其他授权机制的话，需要在 controller 上带上  [Authorize]，然后再action上自定义授权即可，比如 [Authorize(Roles = "Admin")]
            </summary>
        </member>
        <member name="T:NQI_LIMS.Filter.GlobalAuthorizeFilter">
            <summary>
            全局权限过滤器【无效】
            </summary>
        </member>
        <member name="T:NQI_LIMS.Filter.GlobalExceptionsFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:NQI_LIMS.Filter.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:NQI_LIMS.Filter.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:NQI_LIMS.Filter.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:NQI_LIMS.Filter.GlobalRoutePrefixFilter">
            <summary>
            全局路由前缀公约
            </summary>
        </member>
    </members>
</doc>
